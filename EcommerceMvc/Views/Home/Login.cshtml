@using EcommerceMvc.Registrations.ImplementationClasses
@model EcommerceMvc.Models.LoginModel

@{
    ViewBag.Title = "Login To Proceed";

}

@{
    SecurityPrinciple securityPrinciple = HttpContext.Current.User as SecurityPrinciple;
}



@if (securityPrinciple != null && securityPrinciple.IsAuthenticated)
{
    return;
}

<h2>Login To Proceed</h2>
<div class="form-group">
    <form method="post" action="Login" class="needs-validation" novalidate onsubmit="">
        @Html.AntiForgeryToken()
        @*<div class="form-group row">
                <label for="username" class="col-sm-2 col-form-label">Username</label>
                <div class="col-sm-10">
                    <div class="input-group">
                        <input type="text" class="form-control" name="username" id="username" placeholder="Enter your Username" />
                        <div class="invalid-feedback">
                            Please provide a valid city.
                        </div>
                    </div>
                </div>
            </div>
            <div class="form-group row">
                <label for="password" class="col-sm-2 col-form-label">Password</label>
                <div class="col-sm-10">
                    <div class="input-group">
                        <input type="password" class="form-control" name="password" id="password" placeholder="Enter your Password" />
                    </div>
                </div>
            </div>*@

        <div class="form-row">
            <div class="form-group col-md-4">
                @Html.LabelFor(model => model.EmailId)
                @Html.TextBoxFor(model => model.EmailId, new { @class = "form-control", placeholder = "Enter your Email" })
                @Html.ValidationMessageFor(model => model.EmailId, null, new { @class = "text-danger" })

                @*<label for="emailId">First Name</label>
            <input type="text" class="form-control" name="emailId" id="emailId" placeholder="Enter your Email" />*@
            </div>
            <div class="form-group col-md-4">
                @Html.LabelFor(model => model.Password)
                @Html.Password("Password", null, new { @class = "form-control", placeholder = "Enter your Password" })
                @Html.ValidationMessageFor(model => model.Password, null, new { @class = "text-danger" })

                @*<label for="password">Last Name</label>
            <input type="password" class="form-control" name="password" id="password" placeholder="Enter your Password"/>*@
            </div>
        </div>
        <div class="form-group row">
            <div class="col-sm-10">
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                </div>
            <div class="col-sm-10">
                <button type="submit" class="btn btn-primary">Sign in</button>
            </div>
        </div>
    </form>
</div>

<script type="text/javascript">

    // Example starter JavaScript for disabling form submissions if there are invalid fields
    (function () {
        'use strict';
        window.addEventListener('load', function () {
            // Fetch all the forms we want to apply custom Bootstrap validation styles to
            var forms = document.getElementsByClassName('needs-validation');
            // Loop over them and prevent submission
            var validation = Array.prototype.filter.call(forms, function (form) {
                form.addEventListener('submit', function (event) {
                    if (form.checkValidity() === false) {
                        event.preventDefault();
                        event.stopPropagation();
                    }
                    form.classList.add('was-validated');
                }, false);
            });
        }, false);
    })();
</script>

